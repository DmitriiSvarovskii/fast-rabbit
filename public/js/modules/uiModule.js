// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

const UIModule = {
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  modals: {
    balance: null,
    history: null,
    delete: null,
    server: null,
    createKey: null
  },

  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  elements: {
    balanceAmount: null,
    addBalanceBtn: null,
    historyLink: null,
    keysList: null,
    balanceAmountInput: null,
    confirmBalanceBtn: null,
    confirmDeleteBtn: null,
    confirmCreateKeyBtn: null
  },

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
  init() {
    this.initElements();
    this.initModals();
    this.setupEventListeners();
  },

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  initElements() {
    this.elements.balanceAmount = document.getElementById('balanceAmount');
    this.elements.addBalanceBtn = document.getElementById('addBalanceBtn');
    this.elements.historyLink = document.getElementById('historyLink');
    this.elements.keysList = document.getElementById('keysList');
    this.elements.balanceAmountInput = document.getElementById('balanceAmountInput');
    this.elements.confirmBalanceBtn = document.getElementById('confirmBalanceBtn');
    this.elements.confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    this.elements.confirmCreateKeyBtn = document.getElementById('confirmCreateKeyBtn');
  },

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  initModals() {
    this.modals.balance = document.getElementById('balanceModal');
    this.modals.history = document.getElementById('historyModal');
    this.modals.delete = document.getElementById('deleteModal');
    this.modals.server = document.getElementById('serverModal');
    this.modals.createKey = document.getElementById('createKeyModal');
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventListeners() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    this.setupModalEventListeners();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    this.setupButtonEventListeners();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
    this.setupKeysListEventListeners();
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  setupModalEventListeners() {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
    Object.values(this.modals).forEach(modal => {
      if (modal) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            this.hideModal(modal);
          }
        });
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
    const closeButtons = [
      { modal: this.modals.balance, button: document.getElementById('closeBalanceModal') },
      { modal: this.modals.history, button: document.getElementById('closeHistoryModal') },
      { modal: this.modals.delete, button: document.getElementById('closeDeleteModal') },
      { modal: this.modals.server, button: document.getElementById('closeServerModal') },
      { modal: this.modals.createKey, button: document.getElementById('closeCreateKeyModal') }
    ];

    closeButtons.forEach(({ modal, button }) => {
      if (button && modal) {
        button.addEventListener('click', () => this.hideModal(modal));
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω—ã
    const cancelButtons = [
      { modal: this.modals.balance, button: document.getElementById('cancelBalanceBtn') },
      { modal: this.modals.delete, button: document.getElementById('cancelDeleteBtn') },
      { modal: this.modals.createKey, button: document.getElementById('cancelCreateKeyBtn') }
    ];

    cancelButtons.forEach(({ modal, button }) => {
      if (button && modal) {
        button.addEventListener('click', () => this.hideModal(modal));
      }
    });
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
  setupButtonEventListeners() {
    // –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    if (this.elements.addBalanceBtn) {
      this.elements.addBalanceBtn.addEventListener('click', () => {
        this.showModal(this.modals.balance);
        if (this.elements.balanceAmountInput) {
          this.elements.balanceAmountInput.focus();
        }
      });
    }

    // –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    if (this.elements.historyLink) {
      this.elements.historyLink.addEventListener('click', () => {
        this.showModal(this.modals.history);
      });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞
    if (this.elements.balanceAmountInput) {
      this.elements.balanceAmountInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && this.elements.confirmBalanceBtn) {
          this.elements.confirmBalanceBtn.click();
        }
      });
    }
  },

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–ø–∏—Å–∫–∞ –∫–ª—é—á–µ–π
  setupKeysListEventListeners() {
    if (this.elements.keysList) {
      // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      this.elements.keysList.addEventListener('click', (e) => {
        const deviceElement = e.target.closest('.device');
        if (!deviceElement) return;

        if (e.target.closest('.copy-btn')) {
          e.stopPropagation();
          const keyValue = e.target.closest('.copy-btn').getAttribute('data-key');
          if (keyValue) {
            this.copyKey(keyValue);
          }
        } else if (e.target.closest('.delete-action')) {
          e.stopPropagation();
          e.preventDefault();
          const keyId = deviceElement.getAttribute('data-key-id');
          if (keyId) {
            this.showDeleteConfirmation(keyId);
          }
        } else {
          const keyId = deviceElement.getAttribute('data-key-id');
          if (keyId) {
            window.location.href = `/key/${keyId}`;
          }
        }
      });
    }
  },

  // –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  showModal(modal) {
    if (!modal) return;
    
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  },

  // –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  hideModal(modal) {
    if (!modal) return;
    
    modal.classList.remove('active');
    document.body.style.overflow = 'auto';
  },

  // –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  clearModalInputs() {
    if (this.elements.balanceAmountInput) {
      this.elements.balanceAmountInput.value = '';
    }
  },

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  showNotification(message, type = 'info') {
    console.log('Showing notification:', message, type);

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        if (notification.parentNode) {
          notification.parentNode.removeChild(notification);
        }
      }, 300);
    }, 3000);
  },

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
  async copyKey(keyValue) {
    if (navigator.clipboard) {
      try {
        await navigator.clipboard.writeText(keyValue);
        this.showNotification('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success');
        
        // Haptic feedback
        if (window.TelegramModule) {
          window.TelegramModule.hapticFeedback('light');
        }
      } catch (error) {
        this.fallbackCopyTextToClipboard(keyValue);
      }
    } else {
      this.fallbackCopyTextToClipboard(keyValue);
    }
  },

  // Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
  fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
      const successful = document.execCommand('copy');
      document.body.removeChild(textArea);
      if (successful) {
        this.showNotification('–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω', 'success');
      } else {
        this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏', 'error');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
      document.body.removeChild(textArea);
      this.showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏', 'error');
    }
  },

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
  toggleSubsection(subsectionId) {
    console.log('Toggling subsection:', subsectionId);

    const content = document.getElementById(`${subsectionId}-content`);
    if (!content) return;

    const subsection = content.closest('.collapsible-subsection');
    if (!subsection) return;

    if (content.classList.contains('expanded')) {
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª
      content.classList.remove('expanded');
      subsection.classList.remove('expanded');
      subsection.classList.add('collapsed');
    } else {
      // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª
      content.classList.add('expanded');
      subsection.classList.remove('collapsed');
      subsection.classList.add('expanded');
    }

    // Haptic feedback
    if (window.TelegramModule) {
      window.TelegramModule.hapticFeedback('light');
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
  getCountryFlag(country) {
    const flags = {
      'Germany': 'üá©üá™',
      'Turkey': 'üáπüá∑',
      'USA': 'üá∫üá∏',
      'Netherlands': 'üá≥üá±',
      'France': 'üá´üá∑',
      'UK': 'üá¨üáß',
      'Japan': 'üáØüáµ',
      'Singapore': 'üá∏üá¨',
      'Canada': 'üá®üá¶',
      'Australia': 'üá¶üá∫'
    };
    return flags[country] || 'üåê';
  },

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  formatDate(date) {
    if (!date) return '';
    
    try {
      const dateObj = new Date(date);
      return dateObj.toLocaleDateString('ru-RU');
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
      return '';
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–ª—é—á–∞
  createKeyElement(key) {
    const deviceElement = document.createElement('div');
    deviceElement.className = 'device';
    deviceElement.setAttribute('data-id', key.id);
    deviceElement.setAttribute('data-key-id', key.id);

    const createdDate = this.formatDate(key.created_at);

    deviceElement.innerHTML = `
      <div class="device-icon"></div>
      <div class="device-info">
        <div class="device-title">${key.country || ''}</div>
        <div class="device-date">–î–æ–±–∞–≤–ª–µ–Ω–æ ${createdDate}</div>
      </div>
      <div class="device-actions">
        <button class="copy-btn" data-key="${key.key || ''}" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
          <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m0 0h2a2 2 0 012 2v8a2 2 0 01-2 2h-8a2 2 0 01-2-2v-8a2 2 0 012-2z" />
          </svg>
        </button>
      </div>
      <div class="delete-action"></div>
    `;

    return deviceElement;
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  createServerElement(server) {
    const serverElement = document.createElement('div');
    serverElement.className = 'server-item';
    serverElement.setAttribute('data-server-id', server.id);
    serverElement.setAttribute('data-server-country', server.country);

    const flag = this.getCountryFlag(server.country);

    serverElement.innerHTML = `
      <div class="server-icon">${flag}</div>
      <div class="server-info">
        <div class="server-name">${server.country}</div>
        <div class="server-description">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</div>
      </div>
    `;

    return serverElement;
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª—é—á–µ–π
  updateKeysCount(count) {
    const countElement = document.getElementById('keysCount');
    if (countElement) {
      countElement.textContent = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: ${count}`;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
  updateBalance(balance) {
    if (this.elements.balanceAmount) {
      this.elements.balanceAmount.textContent = `${balance || 0} ‚ÇΩ`;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  updateUserName(userName) {
    const userNameElement = document.getElementById('userName');
    if (userNameElement) {
      userNameElement.textContent = userName;
    }
  },

  // –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
  showDeleteConfirmation(keyId) {
    if (this.modals.delete) {
      const deleteKeyInfo = document.getElementById('deleteKeyInfo');
      if (deleteKeyInfo) {
        deleteKeyInfo.textContent = `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ID: ${keyId}`;
      }
      this.showModal(this.modals.delete);
    }
  },

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ Telegram
  openTelegramSupport() {
    const telegramUrl = 'https://t.me/swrsky';

    // Haptic feedback
    if (window.TelegramModule) {
      window.TelegramModule.hapticFeedback('medium');
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    this.showNotification('–û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏...', 'info');

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
    if (window.TelegramModule) {
      window.TelegramModule.openTelegramLink(telegramUrl);
    } else {
      window.open(telegramUrl, '_blank');
    }
  }
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = UIModule;
} else {
  window.UIModule = UIModule;
}
