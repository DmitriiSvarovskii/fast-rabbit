// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º

/**
 * –ü–æ–∫–∞–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {HTMLElement} modal - –≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function showModal(modal) {
    if (!modal) return;

    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
}

/**
 * –°–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {HTMLElement} modal - –≠–ª–µ–º–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function hideModal(modal) {
    if (!modal) return;

    modal.classList.remove('active');
    document.body.style.overflow = 'auto';
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–Ω–∞—Ö
 */
function clearModalInputs() {
    const balanceAmountInput = document.getElementById('balanceAmountInput');
    if (balanceAmountInput) {
        balanceAmountInput.value = '';
    }
}

/**
 * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} type - –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ('info', 'success', 'error', 'warning')
 */
function showNotification(message, type = 'info') {
    console.log('Showing notification:', message, type);

    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    document.body.appendChild(notification);

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.classList.add('show');
    }, 10);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<boolean>} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function copyToClipboard(text) {
    if (navigator.clipboard) {
        try {
            await navigator.clipboard.writeText(text);
            return true;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Clipboard API:', error);
            return fallbackCopyTextToClipboard(text);
        }
    } else {
        return fallbackCopyTextToClipboard(text);
    }
}

/**
 * Fallback –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {boolean} –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function fallbackCopyTextToClipboard(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-999999px';
    textArea.style.top = '-999999px';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();

    try {
        const successful = document.execCommand('copy');
        document.body.removeChild(textArea);
        return successful;
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ fallback –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏:', err);
        document.body.removeChild(textArea);
        return false;
    }
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞ (—Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ)
 * @param {string} subsectionId - ID –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞
 */
function toggleSubsection(subsectionId) {
    console.log('Toggling subsection:', subsectionId);

    const content = document.getElementById(`${subsectionId}-content`);
    if (!content) return;

    const subsection = content.closest('.collapsible-subsection');
    if (!subsection) return;

    if (content.classList.contains('expanded')) {
        // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª
        content.classList.remove('expanded');
        subsection.classList.remove('expanded');
        subsection.classList.add('collapsed');
    } else {
        // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª
        content.classList.add('expanded');
        subsection.classList.remove('collapsed');
        subsection.classList.add('expanded');
    }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
 * @param {string} country - –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
 * @returns {string} –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
 */
function getCountryFlag(country) {
    const flags = {
        'Germany': 'üá©üá™',
        'Turkey': 'üáπüá∑',
        'USA': 'üá∫üá∏',
        'Netherlands': 'üá≥üá±',
        'France': 'üá´üá∑',
        'UK': 'üá¨üáß',
        'Japan': 'üáØüáµ',
        'Singapore': 'üá∏üá¨',
        'Canada': 'üá®üá¶',
        'Australia': 'üá¶üá∫'
    };
    return flags[country] || 'üåê';
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 * @param {string|Date} date - –î–∞—Ç–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
function formatDate(date) {
    if (!date) return '';

    try {
        const dateObj = new Date(date);
        return dateObj.toLocaleDateString('ru-RU');
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã:', error);
        return '';
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–ª—é—á–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
 * @param {object} key - –î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞
 * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç –∫–ª—é—á–∞
 */
function createKeyElement(key) {
    const deviceElement = document.createElement('div');
    deviceElement.className = 'device';
    deviceElement.setAttribute('data-id', key.id);
    deviceElement.setAttribute('data-key-id', key.id);

    const createdDate = formatDate(key.created_at);

    deviceElement.innerHTML = `
    <div class="device-icon"></div>
    <div class="device-info">
      <div class="device-title">${key.country || ''}</div>
      <div class="device-date">–î–æ–±–∞–≤–ª–µ–Ω–æ ${createdDate}</div>
    </div>
    <div class="device-actions">
      <button class="copy-btn" data-key="${key.key || ''}" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m0 0h2a2 2 0 012 2v8a2 2 0 01-2 2h-8a2 2 0 01-2-2v-8a2 2 0 012-2z" />
        </svg>
      </button>
    </div>
    <div class="delete-action"></div>
  `;

    return deviceElement;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞
 * @param {object} server - –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {HTMLElement} –≠–ª–µ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä–∞
 */
function createServerElement(server) {
    const serverElement = document.createElement('div');
    serverElement.className = 'server-item';
    serverElement.setAttribute('data-server-id', server.id);
    serverElement.setAttribute('data-server-country', server.country);

    const flag = getCountryFlag(server.country);

    serverElement.innerHTML = `
    <div class="server-icon">${flag}</div>
    <div class="server-info">
      <div class="server-name">${server.country}</div>
      <div class="server-description">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</div>
    </div>
  `;

    return serverElement;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª—é—á–µ–π
 * @param {number} count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
 */
function updateKeysCount(count) {
    const countElement = document.getElementById('keysCount');
    if (countElement) {
        countElement.textContent = `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: ${count}`;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {number} balance - –°—É–º–º–∞ –±–∞–ª–∞–Ω—Å–∞
 */
function updateBalance(balance) {
    const balanceElement = document.getElementById('balanceAmount');
    if (balanceElement) {
        balanceElement.textContent = `${balance || 0} ‚ÇΩ`;
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 * @param {string} userName - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function updateUserName(userName) {
    const userNameElement = document.getElementById('userName');
    if (userNameElement) {
        userNameElement.textContent = userName;
    }
}

module.exports = {
    showModal,
    hideModal,
    clearModalInputs,
    showNotification,
    copyToClipboard,
    fallbackCopyTextToClipboard,
    toggleSubsection,
    getCountryFlag,
    formatDate,
    createKeyElement,
    createServerElement,
    updateKeysCount,
    updateBalance,
    updateUserName
};
